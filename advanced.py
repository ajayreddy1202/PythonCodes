# [::::::::::::::::::::::::::::::FILE HANDLING::::::::::::::::::::::::::::::]

# Example 1: Reading Employee Data
'''with open("employee_data.txt","r") as file:
    print("Employee Details:")
    for line in file:
        emp_id,name,role,salary=line.strip().split(",")
        print(f"ID:{emp_id},Name:{name},Role:{role},Salary:{salary}")'''



# Example 2: Writing New Employee Records
'''with open("new_employee.txt","w") as file:
    file.write("201,Ajay,HR,45000\n")
    file.write("202,Arjun,Developer,55000\n")
print("Employee records created successfully!")'''



# Example 3: Appending Daily Log Data
'''import datetime
with open("daily_log.txt","a") as file:
    file.write(f"{datetime.datetime.now()} - User logged into system\n")
print("Log entry added successfully!")'''



# Example 4: Searching Specific Employee
'''search_name=input("Enter employee name to search:")
found=False
with open("employee_data.txt","r") as file:
    for line in file:
        emp_id,name,role,salary=line.strip().split(",")
        if name.lower()==search_name.lower():
            print(f"Employee Found-> Id:{emp_id},Role:{role},Salary:{salary}")
            found=True
            break
if not found:
    print("Employee not found in record.")'''
        


# [::::::::::::::::::::::::::::::EXCEPTION HANDLING::::::::::::::::::::::::::::::]

# Example 1: Employee Data — Division by Zero Error (Company Payroll Example)
'''try:
    total_salary=500000
    num_employees=int(input("Enter number of employees:"))
    avg_salary=total_salary/num_employees
    print("Average salary per employee:",avg_salary)
except ZeroDivisionError as e:
    print("Error: Number of employees can't be zero")
    print(e)
except ValueError as e:
    print("Error: Place enter a valid number:")
    print(e)
else:
    print("Calculation completed successfully")
finally:
    print("Payroll process completed")'''



# Example 2: Bank Withdrawal — Custom Exception (Company Finance Example)
'''class InsufficientFundsError(Exception):
    pass
try:
    balance=10000
    withdraw=int(input("Enter amount to withdraw:"))
    if withdraw>balance:
        raise InsufficientFundsError("Insufficient balance in your account")
    else:
        balance-=withdraw
        print("Withdraw successful! Remaining balance:",balance)
except InsufficientFundsError as e:
    print("Transaction Error")
    print(e)
except ValueError as e:
    print("Error: Please enter valid amount")
    print(e)
finally:
    print("Thank you for banking with us.")'''



# Example 3: File Handling — Company Report Generation
'''try:
    # file_name=input("Enter report file name:")
    with open("employee_data.txt","r") as file:
        data=file.read()
        print("File Content:")
        print(data)
except FileNotFoundError as e:
    print("Error: The specified file was not found.")
    print(e)
finally:
    print("Report generation task completed.")'''



# [::::::::::::::::::::::::::::::map(), filter(), reduce(), and lambda()::::::::::::::::::::::::::::::]

# Company Example: Employee Bonus Calculation
# Syntax:lambda arguments : expression
'''bonus=lambda salary:salary+(salary*0.10)
print(bonus(50000))'''



# Company Example: Increase Employee Salaries by 15%
# Syntax:map(function, iterable)
'''salaries=[30000,40000,50000,60000]
new_salaries=list(map(lambda s:s+(s*0.15),salaries))
print("Updated Salaries:",new_salaries)'''



# Company Example: Find Employees with Salary > 50,000
# Syntax:filter(function, iterable)
'''salaries=[30000,45000,52000,49000]
high_salary=list(filter(lambda s:s>50000,salaries))
print("Employees with salary->",high_salary)'''



# Company Example: Total Sales Revenue
# Syntax:reduce(function, iterable)
'''from functools import reduce
sales=[15000,22000,18000,25000]
total_sales=reduce(lambda a,b:a+b,sales)
print("Total sales Revenue:",total_sales)'''



# Example: Employee Performance Analysis
# A company tracks employee monthly sales.
# We want to:
# 1.Add a 5% bonus to each employee’s sales. (map)
# 2.Filter out employees whose sales (after bonus) are less than 30,000. (filter)
# 3.Find the total revenue generated by remaining employees. (reduce)
'''from functools import reduce
sales=[25000,28000,32000,45000,18000]

with_bonus=list(map(lambda s:s+(s*0.05),sales))
print("Sales after bonus:",with_bonus)

filtered_sales=list(filter(lambda s:s>30000,with_bonus))
print("Qulified salaries(>30000):",filtered_sales)

total_revenue=reduce(lambda a,b:a+b,filtered_sales)
print("Totalrevenue of qualified employees:",total_revenue)'''



# [::::::::::::::::::::::::::::::DECORATOR and DECORATOR CHAINING::::::::::::::::::::::::::::::]

# Basic Syntax:
'''def decorator_function(original_function):
    def wrapper():
        # Extra code before
        print("Before calling the function")
        original_function()
        # Extra code after
        print("After calling the function")
    return wrapper
@decorator_function
def display():
    print("Display function executed")
display()'''



# Example: Logging system in a company
'''def logger(func):
    def wrapper():
        print(f"Logging:{func.__name__}function is being executed.")
        func()
        print("Logging:Execution completed.\n")
    return wrapper
@logger
def process_payment():
    print("processing payment...")
@logger
def user_login():
    print("User logged in successfully.")
process_payment()
user_login()'''



# Syntax Example:
'''def bold(func):
    def wrapper():
        return "<b>" + func() + "</b>"
    return wrapper
def italic(func):
    def wrapper():
        return "<i>" + func() + "<i>"
    return wrapper
@bold
@italic
def greet():
    return "Hello,Ajay"
print(greet())'''



# Company Related Example — Adding Features to a Web Function
'''def authenticate(func):
    def wrapper():
        print("Checking user authentication..")
        func()
        print("Authentication succesful.")
    return wrapper
def log_activity(func):
    def wrapper():
        print("Logging user activity..")
        func()
        print("User activity logged.")
    return wrapper
@authenticate
@log_activity
def access_dashboard():
    print("User accessing dashboard..")
access_dashboard()'''



# [::::::::::::::::::::::::::::::ITERATORS::::::::::::::::::::::::::::::]

# Basic Example:
'''employees=["ajay","ravi","surendra"]
emp_iter=iter(employees)
print(next(emp_iter))
print(next(emp_iter))
print(next(emp_iter))
# print(next(emp_iter))'''


# Company-related Example
'''class SalaryIterator:
    def __init__(self,salaries):
        self.salaries=salaries
        self.index=0
    def __iter__(self):
        return self
    def __next__(self):
        if self.index<len(self.salaries):
            result=self.salaries[self.index]
            self.index+=1
            return result
        else:
            raise StopIteration
emp_salaries=[30000,40000,50000,60000]
salary_iter=SalaryIterator(emp_salaries)
for sal in salary_iter:
    print("Processing salary:",sal)'''


# Q: Write a Python program to create an iterator that returns squares of numbers up to a given limit.
'''class SquareIterator:
    def __init__(self,limit):
        self.limit=limit
        self.num=1
    def __iter__(self):
        return self
    def __next__(self):
        if self.num<=self.limit:
            result=self.num**2
            self.num+=1
            return result
        else:
            raise StopIteration
for val in SquareIterator(5):
    print(val)'''



# [::::::::::::::::::::::::::::::GENERATORS::::::::::::::::::::::::::::::]

# Simple Syntax Example:
'''def simple_generator():
    yield 1
    yield 2
    yield 3
gen=simple_generator()
print(next(gen))
print(next(gen))
print(next(gen))
# print(next(gen))'''



# Example: Suppose a company processes large transaction IDs and only wants to filter even transaction IDs efficiently.
'''def even_generator(limit):
    for i in range(limit):
        if i%2==0:
            yield i
gen=even_generator(10)
for num in gen:
    print(num)'''



# Real Company Use Case Example
'''def read_large_file(filename):
    with open(filename,'r') as file:
        for line in file:
            yield line.strip()
for log in read_large_file("employee_data.txt"):
    print(log)'''



# Generator Expression (Short Form)
'''gen=(x**2 for x in range(5))
for val in gen:
    print(val)'''



# [::::::::::::::::::::::::::::::JSON and PICKLE::::::::::::::::::::::::::::::]

# Convert Python → JSON (Serialization)
'''import json
data={"name":"ajay","age":22,"city":"nellore"}
print(type(data))
json_str=json.dumps(data)
print(json_str)
print(type(json_str))'''



# Convert JSON → Python (Deserialization)
'''import json
data='{"name":"ajay","age":22,"city":"nellore"}'
print(type(data))
json_str=json.loads(data)
print(json_str)
print(type(json_str))'''



# Write JSON to a File
'''import json
data={"emp_id":101,"name":"ajay","salary":50000}
with open("employee.json","w") as f:
    json.dump(data,f)'''



# Read JSON from a File
'''import json
with open("employee.json","r") as f:
    result=json.load(f)
print(result)'''



# Company-Related Example (TCS / Infosys Type Question)
'''import json
data={"emp_id":101,"name":"ajay","salary":50000}
with open("data.json","w") as f:
    json.dump(data,f)
print("Data saved in JSON format successfully")'''



# Example: Pickle a Python Object
'''import pickle
data={"name":"ajay","age":22,"city":"nellore"}
with open("data.pkl","wb") as f:
    pickle.dump(data,f)
print("Data pickled successfully")'''



# Unpickle (Load Back the Object)
'''import pickle
with open("data.pkl","rb") as f:
    obj=pickle.load(f)
print(obj)'''



# Company-Related Example (Cognizant / Wipro Type)

'''import pickle
student_data={"rollno":101,"name":"ajay","marks":[95,85,80,98]}
with open("student.pkl","wb") as f:
    pickle.dump(student_data,f)
print("student data pickled successfully")

with open("student.pkl","rb") as f:
    result=pickle.load(f)
print("Restored data:",result)'''



# [::::::::::::::::::::::::::::::MULTI THREADING::::::::::::::::::::::::::::::]

# 5. Syntax & Simple Example
'''import threading
import time
def print_numbers():
    for i in range(1,6):
        print("Numbers:",i)
        time.sleep(1)

def print_letters():
    for ch in ['A','B','C','D','E']:
        print("Letters:",ch)
        time.sleep(1)

# Creating threads
t1=threading.Thread(target=print_numbers)
t2=threading.Thread(target=print_letters)

t1.start()
t2.start()

# Wait for both threads to finish
t1.join()
t2.join()

print("Main Thread Finished")'''



# Company-related Example: “Downloading Files”
'''import threading
import time
def download_file(filename):
    print(f"Started downloading {filename}")
    time.sleep(2)
    print(f"Finished downloading {filename}")
files=['file1.pdf','file2.pdf','file3.pdf']
threads=[]
for file in files:
    t=threading.Thread(target=download_file,args=(file,))
    t.start()
    threads.append(t)
for t in threads:
    t.join()
print("All downloads complete.")'''




# [::::::::::::::::::::::::::::::REGULAR EXPRESSIONS::::::::::::::::::::::::::::::]

# Example 1: Validate an Email ID (Company Favorite)
'''import re
email="student123@gmail.com"
pattern=r"^[a-zA-Z0-9._]+@[a-zA-Z]+\.[a-zA-Z]{2,3}$"
if re.match(pattern,email):
    print("Valid Email ID")
else:
    print("Invalid Email ID")'''



# Example 2: Extract All Mobile Numbers from Text
'''import re
text="Call me at 9876543210 or 9848227893 for more info."
pattern=r"\b\d{10}\b"
numbers=re.findall(pattern,text)
print("Mobile Numbers Found:",numbers)'''



# Example 3: Replace All Digits with “#”
'''import re
data="Order123 cost is 456 rupees."
result=re.sub(r"\d","#",data)
print(result)'''



# Example 4: Split Text by Comma or Space
'''import re
text="apple,banana orange,grape"
pattern=r"[,\s]+"
words=re.split(pattern,text)
print(words)'''



# Example 5: Search for a Word in a String
'''import re
text="Python is powerful and popular"
if re.search(r"powerful",text):
    print("word found.")
else:
    print("word not found.")'''



# Real-World Company Scenario
'''import re
log_data="""ERROR at 2025-10-21 12:34:56 - Failed to connect
INFO at 2025-10-21 12:35:01 - Connection successful"""
pattern=r"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}"
times=re.findall(pattern,log_data)
print(times)'''



# [::::::::::::::::::::::::::::::DATABASE CONNECTION::::::::::::::::::::::::::::::]


# Step-by-Step Explanation:
'''# 1.Import the library
import mysql.connector
# 2.Establish a connection
connection=mysql.connector.connect(
    host="localhost",
    user="root",
    password="1234",
    database="comany_db"
)
# 3.Create a cursor
cursor=connection.cursor()
# 4.Execute SQL queries
cursor.execute("SELECT * FROM employees")
# 5.Fetch results
rows=cursor.fetchall()
for row in rows:
    print(row)
# 6.Close the connection
connection.close()'''



'''import mysql.connector

# Step 1: Connect to the database
connection = mysql.connector.connect(
    host="localhost",
    user="root",
    password="1234",
    database="company_db"
)

# Step 2: Create a cursor
cursor = connection.cursor()

# Step 3: Execute an SQL query (Create table)
cursor.execute("""
CREATE TABLE IF NOT EXISTS employees (
    emp_id INT PRIMARY KEY,
    name VARCHAR(50),
    salary FLOAT
)
""")

# Step 4: Insert records
cursor.execute("INSERT INTO employees VALUES (101, 'Ajay', 55000)")
cursor.execute("INSERT INTO employees VALUES (102, 'Ravi', 60000)")
connection.commit()  # Saves changes to database

# Step 5: Fetch records
cursor.execute("SELECT * FROM employees")
data = cursor.fetchall()

print("Employee Details:")
for row in data:
    print(row)

# Step 6: Close connection
connection.close()'''


'''import pymysql
class first_letter_num(Exception):
    def _str_(self):
        return "Username should not start with number"
class integer_username(Exception):
    def _str_(self):
        return "Username should start with alphabets or username should be number"
class Agelesser(Exception):
    def _str_(self):
        return "Age should be greater than zero"
class phone_no(Exception):
    def _str_(self):
        return "Phoneno should contains 10 digits"

try:
    con_obj=pymysql.connect(
        user="root",
        password="root",
        host="localhost"
    )
    cur_obj=con_obj.cursor()
    cur_obj.execute("create database if not exists detailsDB")
    print("database created successfully")
    cur_obj.execute("create table if not exists detailsDB.user_info(username varchar(20),age int(10),address varchar(20),phoneno int(10))")
    print("Table created successfully")
    try:
        Username=input("enter username:")
        if not Username.isidentifier():
            raise integer_username
        elif Username[0] in "0987654321":
            raise first_letter_num
        age=int(input("enter age:"))
        if age<=0:
            raise Agelesser
        address=input("enter address:")
        phoneno=int(input("enter phoneno:"))
        if len(str(phoneno))!=10:
            raise phone_no
        cur_obj.execute("insert into detailsDB.user_info(username,age,address,phoneno)values(%s,%s,%s,%s)",(Username,age,address,phoneno))
        con_obj.commit()
        print("data inserted successfully")
        try:
            cur_obj.execute("select*from detailsDB.user_info")
            for data in cur_obj:
                print(data)
        except Exception as e:
            print(e)
    except integer_username as e:
        print(e)
    except first_letter_num as e:
        print(e)
    except Agelesser as e:
        print(e)
    except phone_no as e:
        print(e)
except Exception as e:
    print(e)'''









































